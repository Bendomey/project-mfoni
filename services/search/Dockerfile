# Stage 1: Build the Go binary
FROM golang:1.23.5 AS builder

RUN mkdir /app/
WORKDIR /app

# Copy and download dependencies
ADD go.mod go.sum /app/
RUN go mod download

# Copy the source code
COPY . .

# Build the Go application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o build/search-service cmd/search-service/main.go

# Stage 2: Create a minimal runtime image
FROM alpine:latest

ARG APP_NAME
ENV APP_NAME=$APP_NAME

ARG GO_ENV
ENV GO_ENV=$GO_ENV

ARG PORT
ENV PORT=$PORT

ARG URL
ENV URL=$URL

ARG OPENSEARCH_NODE
ENV OPENSEARCH_NODE=$OPENSEARCH_NODE

ARG OPENSEARCH_USERNAME
ENV OPENSEARCH_USERNAME=$OPENSEARCH_USERNAME

ARG OPENSEARCH_PASSWORD
ENV OPENSEARCH_PASSWORD=$OPENSEARCH_PASSWORD

ARG NUMBER_OF_SHARDS
ENV NUMBER_OF_SHARDS=$NUMBER_OF_SHARDS

ARG NUMBER_OF_REPLICAS
ENV NUMBER_OF_REPLICAS=$NUMBER_OF_REPLICAS

ARG SENTRY_DSN
ENV SENTRY_DSN=$SENTRY_DSN

ARG SENTRY_ENVIRONMENT
ENV SENTRY_ENVIRONMENT=$SENTRY_ENVIRONMENT

ARG SENTRY_DEBUG
ENV SENTRY_DEBUG=$SENTRY_DEBUG

ARG RABBITMQ_URL
ENV RABBITMQ_URL=$RABBITMQ_URL

ARG MONGODB_URI
ENV MONGODB_URI=$MONGODB_URI

ARG DATABASE_NAME
ENV DATABASE_NAME=$DATABASE_NAME

ARG CONTENT_COLLECTION
ENV CONTENT_COLLECTION=$CONTENT_COLLECTION

ARG TAG_COLLECTION
ENV TAG_COLLECTION=$TAG_COLLECTION

ARG COLLECTIONS_COLLECTION
ENV COLLECTIONS_COLLECTION=$COLLECTIONS_COLLECTION

ARG CONTENT_TAGS_COLLECTION
ENV CONTENT_TAGS_COLLECTION=$CONTENT_TAGS_COLLECTION

ARG CONTENT_COLLECTIONS_COLLECTION
ENV CONTENT_COLLECTIONS_COLLECTION=$CONTENT_COLLECTIONS_COLLECTION

ARG JWT_SECRET_KEY
ENV JWT_SECRET_KEY=$JWT_SECRET_KEY

ARG JWT_ISSUER
ENV JWT_ISSUER=$JWT_ISSUER

ARG JWT_AUTHORIZED_APPS
ENV JWT_AUTHORIZED_APPS=$JWT_AUTHORIZED_APPS

RUN mkdir /app/
WORKDIR /app/

# Copy the built binary from the builder stage
COPY --from=builder /app/build/search-service /app/build/search-service
COPY --from=builder /app/config /app/config

# Run the application
CMD ["sh", "-c", "/app/build/search-service -e $GO_ENV"]

# Expose application port
EXPOSE $PORT